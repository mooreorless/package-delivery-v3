/*
 *Configuring the applications controllers and routes
 */
(function () {


  angular.module('packageDelivery', ['ngRoute', 'toastr', 'ngMap']);
  /*
  Configuring the templates html and connecting them to their respective controllers
   */
  function config ($routeProvider, $locationProvider) {
    $routeProvider
      .when('/register', {
        templateUrl: '/auth/register/register.view.html',
        controller: 'registerCtrl',
        controllerAs: 'vm'
      })
      .when('/login', {
        templateUrl: '/auth/login/login.view.html',
        controller: 'loginCtrl',
        controllerAs: 'vm'
      })
      .when('/profile', {
        templateUrl: '/profile/profile.view.html',
        controller: 'profileCtrl',
        controllerAs: 'vm'
      })
      .when('/orders', {
        templateUrl: '/orders/orders.view.html',
        controller: 'OrderCtrl',
        controllerAs: 'vm'
      })
      .when('/orders/new', {
        templateUrl: '/orders/newOrder.view.html',
        controller: 'newOrderCtrl',
        controllerAs: 'vm'
      })
      .when('/order/:orderID', {
        templateUrl: '/orders/singleOrder.view.html',
        controller: 'singleOrderCtrl',
        controllerAs: 'vm'
      })
        .when('/label/:orderID', {
        templateUrl: '/orders/label.view.html',
        controller: 'labelCtrl',
        controllerAs: 'vm'
      })
			.when('/update/details', {
				templateUrl: 'auth/update/details/user.view.html',
				controller: 'updateUserCtrl',
				controllerAs: 'vm'
			})
			.when('/admin/dashboard', {
				templateUrl: '/admin/dashboard/dashboard.view.html',
				controller: 'DashBoardCtrl',
				controllerAs: 'vm'
			})
			.when('/admin/dashboard/:orderID', {
				templateUrl: '/admin/dashboard/individual-item/individual-item.view.html',
				controller: 'singleOrderCtrl',
				controllerAs: 'vm'
			})
      .otherwise({redirectTo: '/login'});

    // use the HTML5 History API
    $locationProvider.html5Mode(true);

  }

  /*
  Runs the specific route depending on the state of function service
   */
  function run($rootScope, $location, $window, functionService) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {

    	if (!functionService.isLoggedIn()) {
				switch ($location.path()) {
					case '/profile':
						console.log('login to view profile');
						// $location.path('/'); added redirect in individual route instead
						break;

					case '/orders':
						console.log('login to view orders');
						console.log('if user is logged in message with watermark here');
						// $location.path('/');
						break;

					case '/orders/new':
						console.log('login to make an order');
						// $location.path('/');
						break;
				}
			}
    });
  }

  // Alter the angular object so that all corresponding effects such as run and config are put onto it
  angular
    .module('packageDelivery', ['ngRoute', 'toastr', 'ngMap'])
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$window', 'functionService', run]);

})();
(function () {

    angular
        .module('packageDelivery')
        .controller('labelCtrl', labelCtrl);

    labelCtrl.$inject = ['$location', '$rootScope', '$routeParams', '$route', 'functionService', 'NgMap'];
    function labelCtrl($location, $rootScope, $routeParams, $route, functionService, NgMap) {

        var vm = this;
        //get order ID from route parameters
        vm.orderID = $routeParams.orderID;

        functionService
            .getSingleOrder(vm.orderID)
            .error(function (err) {
                if (err) {
                    alert(err);
                }
            })
            .then(function () {
                vm.order = functionService.loadSingleOrder();
            }).then(function () {
            //do some logic to get our view variables
            vm._id = vm.order._id;
            console.log(vm);
            vm.pickUpAddress = vm.order.pickUpNumber + ' ' + vm.order.pickUpName + ' ' + vm.order.pickUpSuburb + ' ' + vm.order.pickUpPostcode;
            vm.dropOffAddress = vm.order.dropOffNumber + ' ' + vm.order.dropOffName + ' ' + vm.order.dropOffSuburb + ' ' + vm.order.dropOffPostcode;
        });

    }
})();
(function () {

  angular
	.module('packageDelivery')
	.controller('newOrderCtrl', newOrderCtrl);

  newOrderCtrl.$inject = ['$location', '$rootScope', 'meanData', 'functionService', 'toastr'];
  function newOrderCtrl($location, $rootScope, meanData, functionService, toastr) {

		var vm = this;
		vm.currentUser = {};

		vm.isLoggedIn = functionService.isLoggedIn();

		meanData.getProfile()
		.success(function(data) {
			vm.currentUser = data;
			console.log(data);
			vm.newOrder = {
				userID: vm.currentUser._id,
				userName: vm.currentUser.firstName+' '+vm.currentUser.lastName,
				pickUpNumber: vm.currentUser.streetNumber,
				pickUpName: vm.currentUser.streetName,
				pickUpSuburb: vm.currentUser.suburb,
				pickUpPostcode: vm.currentUser.postCode,
				dropOffNumber: '',
				dropOffName: '',
				dropOffSuburb: '',
				dropOffPostcode: '',
				notes: '',
				isFragile: '',
				isExpress: '',
				state: 'Order Placed',
				pickUpDate: ''
			};
			console.log(vm.newOrder);
		})
		.error(function (e) {
			toastr.error('Please sign in or make an account', 'Error');
			$location.path('/');
			console.log(e);
		});



		vm.onSubmit = function () {

			if (validateFields()) {
				console.log('Placing Order');
				console.log(vm.newOrder);
				functionService
					.placeOrder(vm.newOrder)
					.error(function(err){
						console.log(err);
						toastr.error(err, 'Error');
				})
				.then(function(){
					$location.path('orders')
				});
			}
		};

	  function validateFields() {
		  return checkPickUpStreetNumber() && checkPickUpStreetName() && checkPickUpSuburb() && checkPickupPostcode() && checkDropOffStreetNumber() && checkDropOffStreetName() && checkDropOffSuburb() && checkDropOffPostcode();
	  }//end validateFields()


	  //PICK UP VALIDATION

	  function checkPickUpStreetNumber() {
		  var streetNumber = document.getElementById('pickUpNumber').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(streetNumber)) || streetNumber == ''){
		  	formatInput("pickUpNumber", "Error: Please enter a valid pick up street number");
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPickupStreetNumber()

	  function checkPickUpStreetName() {
		  var streetName = document.getElementById('pickUpName').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(streetName)) || streetName == ''){
		  	formatInput("pickUpName", "Error: Please enter a valid pick up street name");
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPickupStreetName()

	  function checkPickUpSuburb() {
		  var suburb = document.getElementById('pickUpSuburb').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(suburb)) || suburb == ''){
		  	formatInput("pickUpSuburb", "Error: Please enter a valid pick up suburb");
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPickUpSuburb()

	  function checkPickupPostcode() {
		  var postCode = document.getElementById('pickUpPostcode').value;
		  var regExprContainsLetters = /[a-zA-Z]/;
		  var regExprInvalidPostcode = /([0-3][0-9]{3})|([5-9][0-9]{3})/;

		  if((regExprContainsLetters.test(postCode)) || regExprInvalidPostcode.test(postCode) || postCode == '' || postCode.length > 4 || postCode.length < 4){
		  	formatInput("pickUpPostcode", "Error: Please enter a valid QLD pick up postcode");
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPickupPostcode()

	  // DROP OFF VALIDATION

	  function checkDropOffStreetNumber() {
		  var streetNumber = document.getElementById('dropOffNumber').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(streetNumber)) || streetNumber == ''){
		  	formatInput("dropOffNumber", "Error: Please enter a valid delivery street number");
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkDropOffStreetNumber()

	  function checkDropOffStreetName() {
		  var streetName = document.getElementById('dropOffName').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(streetName)) || streetName == ''){
		  	formatInput("dropOffName", "Error: Please enter a valid delivery street name");
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkDropOffStreetName()

	  function checkDropOffSuburb() {
		  var suburb = document.getElementById('dropOffSuburb').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(suburb)) || suburb == ''){
		  	formatInput("dropOffSuburb", "Error: Please enter a valid delivery suburb");
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkDropOffSuburb()

	  function checkDropOffPostcode() {
		  var postCode = document.getElementById('dropOffPostcode').value;
		  var regExprContainsLetters = /[a-zA-Z]/;
		  var regExprInvalidPostcode = /([0-3][0-9]{3})|([5-9][0-9]{3})/;

		  if((regExprContainsLetters.test(postCode)) || regExprInvalidPostcode.test(postCode) || postCode == '' || postCode.length > 4 || postCode.length < 4){
			  formatInput("dropOffPostcode", "Error: Please enter a valid QLD delivery postcode");
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkDropOffPostcode()

	  function formatInput(inputID, err) {

  		document.getElementById(inputID).style.borderColor = "red";
		document.getElementById(inputID).focus();
		document.getElementById("order-error-msg").innerHTML = err;
		document.getElementById("order-error-msg").style.display = "block";

	  }

  }

})();
(function () {

  angular
    .module('packageDelivery')
    .controller('OrderCtrl', OrderCtrl);

  OrderCtrl.$inject = ['$location', '$rootScope', '$route', 'meanData', 'functionService', 'toastr'];
  function OrderCtrl($location, $rootScope, $route, meanData, functionService, toastr) {

    var vm = this;
    vm.currentUser = {};
    vm.ordersMessage = '';
    vm.filter = '';

    vm.isLoggedIn = functionService.isLoggedIn();

	meanData.getProfile()
	.success(function(data) {
		vm.currentUser = data;
		if (functionService.loggedInUserType() === 'driver'){
			vm.ordersMessage = 'Displaying orders assigned to you ' + vm.currentUser.firstName;
		}
		else if (functionService.loggedInUserType() === 'customer') {
			vm.ordersMessage = 'Displaying orders placed by you ' + vm.currentUser.firstName;
		} else {
			vm.ordersMessage = 'Displaying all orders';
		}
	})
	.error(function (e) {
		toastr.error('Please sign in or make an account', 'Error');
		$location.path('/');
	})
	.then(function(){
		if (functionService.loggedInUserType() === 'admin') {
			functionService.getCurrentOrders()
				.then(function() {
					vm.orders = functionService.loadOrders();
				})
				.then(function() {
					vm.orders.forEach(function(item, index){
						if (item.seenByDriver === false){
							vm.orders[index].panelClass = 'panel panel-warning';
						}
						else{
							vm.orders[index].panelClass = 'panel panel-default';
						}
					});
				})
		} else {
			functionService
				.getUserOrders(vm.currentUser)
				.error(function(err){
					toastr.warning(err, 'Error');
				})
				.then(function(){
					//if no orders found, have watermark/empty state view etc
					vm.orders = functionService.loadOrders();
					vm.newOrderCount = 0;
					if (functionService.loggedInUserType() == 'driver'){
						vm.orders.forEach(function(item, index){
							if (item.seenByDriver === false){
								vm.orders[index].panelClass = 'panel panel-warning';
							}
							else{
								vm.orders[index].panelClass = 'panel panel-default';
							}
						});
					}
					else{
						vm.orders.forEach(function(item, index){
							vm.orders[index].panelClass = 'panel panel-default';
						});
					}
				});
		}
	});

    vm.openOrder = function(order){
			if (functionService.loggedInUserType() === 'admin') {
				$location.path('admin/dashboard/' + order._id);
			} else {
				$location.path('order/' + order._id);
			}
    };
  }
})();
(function () {

	angular
		.module('packageDelivery')
		.controller('singleOrderCtrl', singleOrderCtrl);

	singleOrderCtrl.$inject = ['$location', '$rootScope', '$routeParams', '$route', 'functionService', 'NgMap'];
	function singleOrderCtrl($location, $rootScope, $routeParams, $route, functionService, NgMap) {

		var vm = this;

		var date = new Date();
		vm.currentDate = date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear();

		vm.loggedInUserType = functionService.loggedInUserType;

		//get order ID from route parameters 
		vm.orderID = $routeParams.orderID;

		
		//variable to help with page layout during different job states
		vm.googleMapsUrl = '<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC0ZemKOuENUDXYGs4GVAVIbkPs3vyqJXA"></script>';

		functionService
		.getSingleOrder(vm.orderID)
		.error(function(err){
			if (err){
			alert(err);
			}
		})
		.then(function(){
			vm.order = functionService.loadSingleOrder();
			if (vm.order.pickedUpAt) {
				vm.pickedUpAtStatus = 'complete';
			} 
			if (vm.order.droppedOffAt) {
				vm.droppedOffAtStatus = 'complete';
			}
			if (vm.order.paidAtStatus) {
				vm.paidAtStatus = 'complete';
			}
		}).then(function(){
			//do some logic to get our view variables
			vm.pickUpAddress = vm.order.pickUpNumber+' '+vm.order.pickUpName+' '+vm.order.pickUpSuburb+' '+vm.order.pickUpPostcode;
			vm.dropOffAddress = vm.order.dropOffNumber+' '+vm.order.dropOffName+' '+vm.order.dropOffSuburb+' '+vm.order.dropOffPostcode;
			vm.state = vm.order.state;
			// Driver name
			vm.driverName = (vm.order.driver).charAt(0).toUpperCase() + vm.order.driver.slice(1);
			//if we are logged in as a driver, set isSeen to true on order object
			if (vm.loggedInUserType() == 'driver' && vm.order.seenByDriver === false){
				console.log('calling mark job as seen');
				functionService.markJobAsSeen({_id : vm.order._id});
			}
		});

		NgMap.getMap();

		vm.updateJobState = function(newState){
			update = {
				_id: vm.orderID,
				state: newState,
				pickedUpAt: vm.order.pickedUpAt,
				droppedOffAt: vm.order.droppedOffAt,
				paidAt: vm.order.paidAt
			};
		
			if (newState.toLowerCase().replace(' ', '') == 'pickedup'){
				update.pickedUpAt = Date.now();
				console.log('Picked Up Selected');
			} else if (newState.toLowerCase().replace(' ', '') == 'droppedoff'){
				update.droppedOffAt = Date.now();
				console.log('Dropped Off Selected');
			} else 	if (newState.toLowerCase().replace(' ', '') == 'paid'){
				update.paidAt = Date.now();
				console.log('Paid At Selected');
				//todo format date
			};

			functionService.updateJobState(update).then(function(){
				functionService
				.getSingleOrder(vm.orderID)
				.error(function(err){
					if (err){
						alert(err);
					}
				})
				.then(function(){
					vm.order = functionService.loadSingleOrder();					
				})
				.then(function(){
					$route.reload();
				});
			});
		};
	}
})();
(function() {

	angular
		.module('packageDelivery')
		.controller('profileCtrl', profileCtrl);

	profileCtrl.$inject = ['$location', 'functionService', 'meanData', 'toastr'];
	function profileCtrl($location, functionService, meanData, toastr) {
		var vm = this;

		vm.user = {};

		meanData.getProfile()
		.success(function(data) {
			vm.user = data;
			console.log(data);
		})
		.error(function (e) {
			toastr.error('Please sign in or make an account', 'Error');
			$location.path('/');
			console.log(e);
    });

		console.log(functionService.loggedInUserType());

    $('[data-toggle="tooltip"]').tooltip();

	  vm.view = "Account";

	  if(window.location.hash == '#FAQ'){
	  		document.getElementById('help').className = "active";
			document.getElementById('account').className = "";
			document.getElementById('billing').className = "";
			vm.view = "Help";
	  } 

	  vm.setView = function(view) {

	  	switch (view) {
			  case 'Account':
				  document.getElementById('account').className = "active";
				  document.getElementById('billing').className = "";
				  document.getElementById('help').className = "";
				  break;
			  case 'Billing':
				  document.getElementById('billing').className = "active";
				  document.getElementById('account').className = "";
				  document.getElementById('help').className = "";
				  break;
			  case 'Help':
				  document.getElementById('help').className = "active";
				  document.getElementById('account').className = "";
				  document.getElementById('billing').className = "";
				  break;
		  }
		  vm.view = view;
	  };

  	vm.updateDetails = function(){
		functionService.updateUser(vm.user);
	};
  }

})();
(function() {

	angular
		.module('packageDelivery')
		.controller('DashBoardCtrl', DashBoardCtrl);

	DashBoardCtrl.$inject = ['$location', '$route', 'functionService', 'toastr', 'NgMap'];
	function DashBoardCtrl($location, $route, functionService, toastr, NgMap ) {

		var vm = this;

		var date = new Date();
		vm.currentDate = date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear();
		vm.selectedDriver = 'Select Driver';
		vm.placedOrders = [];

		// Get drivers to then be assigned
		functionService.getAllDrivers()
			.then(function() {
				vm.drivers = functionService.loadDrivers();
			});
		

		vm.assignDriver = function(driver) {
			var toBeAssigned = {
				_id: driver._id,
				driverName: driver.driverName.toLowerCase()
			};
			// Checks if driver has too many jobs
			functionService.getJobCountForDriver(toBeAssigned.driverName)
				.then(function() {
					vm.jobs = functionService.loadOrders();

					if (vm.jobs.length > 5) {
						toastr.warning('This driver has too many jobs, please select another', 'Warning');
					} else {
						functionService.assignDriver(toBeAssigned);
					}
				})
		};

		// Populates all orders
		functionService.getCurrentOrders()
			.then(function() {
				vm.orders = functionService.loadOrders();
				vm.orders.forEach(function(item, index){
					if (item.state == 'Order Placed'){
						vm.placedOrders.push(item);
					}
				});
				vm.allOrders = functionService.loadOrders();
				vm.currentOrderCount = vm.orders.length;
			});

		// Delivered orders
		functionService.getDeliveredOrders()
			.then(function() {
				vm.orders = functionService.loadOrders();
				vm.deliveredOrderCount = vm.orders.length;
			});

		// Orders waiting
		functionService.getPlacedOrders()
			.then(function() {
				vm.orders = functionService.loadOrders();
				vm.awaitingOrderCount = vm.orders.length;
			});

		NgMap.getMap();
	}
})();
/*
Controller for the login function
 */
(function () {

  angular
  .module('packageDelivery')
  .controller('loginCtrl', loginCtrl);
  //injecting
  loginCtrl.$inject = ['$location', 'functionService', 'toastr'];
  function loginCtrl($location, functionService, toastr) {
    var vm = this;

    //create empty object to send with http request
    vm.credentials = {
      email : "",
      password : ""
    };
    /*
     When the user submits the, do all validation and login
     */
    vm.onSubmit = function () {
      functionService
        .login(vm.credentials)
        .error(function(err){
          document.getElementById('login-error-msg').style.display = 'block';
        })
        .then(function(){
          if (functionService.loggedInUserType() === 'admin') {
            $location.path('/admin/dashboard');
          } else {
            $location.path('/profile');
          }
        });
    };
  }

})();

/*
Form handling for the register
 */
(function () {

  angular
    .module('packageDelivery')
    .controller('registerCtrl', registerCtrl);

  registerCtrl.$inject = ['$location', 'functionService', 'toastr'];
  function registerCtrl($location, functionService, toastr) {
    var vm = this;

    //create object to be populated with form data, this will be sent in http request to server
    vm.credentials = {
      firstName : "",
      lastName : "",
      email : "",
      password: "",
      streetNumber: "",
      streetName: "",
      suburb: "",
      postCode: ""
    };

	/*
	When the user submits the, do all validation and transport data given to the back end
	 */
    vm.onSubmit = function () {
      console.log('Submitting registration');
			if (validateFields()) { //check for valid fields
				functionService
					.register(vm.credentials)
					.error(function(err){
						toastr.error('There\'s already an account registered with that email address', 'Error');
					})
					.then(function(){
						$location.path('/profile');
				});
			}
    };

    /*
    Makes a check of all the fields for validity
     */
    function validateFields() {
	    return checkFirstName() && checkLastName() && checkEmail() && checkPassword() && checkStreetName() && checkStreetNumber() && checkSuburb() && checkPostcode();
    }

		/*
		Checks the first name for invalid input
		 */
	  function checkFirstName() {
		  var name = document.getElementById('firstName').value;
		  var regExprContainsNumbers = /[0-9]/;
			// if first name is empty, contains numbers inform user with animation and colour that it is incorrect
		  if(name === ''){
			  document.getElementById("firstName").style.borderColor = "red";
			  document.getElementById("firstName").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a first name";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  if(regExprContainsNumbers.test(name)){
				  document.getElementById("firstName").style.borderColor = "red";
				  document.getElementById("firstName").focus();
				  document.getElementById("register-error-msg").innerHTML = "Please enter a valid first name";
				  document.getElementById("register-error-msg").style.display = "block";
				  return false;
			  } else {
				  document.getElementById("firstName").style.borderColor = "transparent";
				  return true;
			  }//end if
		  }//end if
	  }//end checkFirstName()

		/*
		 Checks the last name for invalid input
		 */
	  function checkLastName() {
		  var name = document.getElementById('lastName').value;
		  var regExprContainsNumbers = /[0-9]/;
			// if last name is empty, contains numbers inform user with animation and colour that it is incorrect
		  if(name === ''){
			  document.getElementById("lastName").style.borderColor = "red";
			  document.getElementById("lastName").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a last name";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  if(regExprContainsNumbers.test(name)){
				  document.getElementById("lastName").style.borderColor = "red";
				  document.getElementById("lastName").focus();
				  document.getElementById("register-error-msg").innerHTML = "Please enter a valid last name";
				  document.getElementById("register-error-msg").style.display = "block";
				  return false;
			  } else {
				  document.getElementById("lastName").style.borderColor = "transparent";
				  return true;
			  }//end if
		  }//end if
	  }//end checkLastName()

		/*
		 Checks the  email for invalid input
		 */
	  function checkEmail() {
		  var email = document.getElementById('email').value;
		  var re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

		  if(email === ''){
			  document.getElementById("email").style.borderColor = "red";
			  document.getElementById("email").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter an email";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  if(re.test(email)){
				  document.getElementById("email").style.borderColor = "transparent";
				  return true;
			  } else {
				  document.getElementById("email").style.borderColor = "red";
				  document.getElementById("email").focus();
				  document.getElementById("register-error-msg").innerHTML = "Please enter a valid email";
				  document.getElementById("register-error-msg").style.display = "block";
				  return false;
			  }//end if
		  }//end if
	  }//end checkEmail()

		/*
		 Checks the password for invalid input
		 */
	  function checkPassword() {
		  var password = document.getElementById('password').value;
		  if(password.length < 5) {
			  document.getElementById("password").style.borderColor = "red";
			  document.getElementById("password").focus();
			  document.getElementById("register-error-msg").innerHTML = "Password cannot be less than 5 characters";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else if(password.length > 20) {
			  document.getElementById("password").style.borderColor = "red";
			  document.getElementById("password").focus();
			  document.getElementById("register-error-msg").innerHTML = "Password cannot be more than 20 characters";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  document.getElementById("password").style.borderColor = "transparent";
			  return true;
		  }//end if
	  }//end checkPassword()

		/*
		 Checks the  street number for invalid input
		 */
	  function checkStreetNumber() {
		  var streetNumber = document.getElementById('streetNumber').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(streetNumber)) || streetNumber == ''){
			  document.getElementById("streetNumber").style.borderColor = "red";
			  document.getElementById("streetNumber").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a valid street number";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkStreetNumber()

		/*
		 Checks the street name for invalid input
		 */
	  function checkStreetName() {
		  var streetName = document.getElementById('streetName').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(streetName)) || streetName == ''){
			  document.getElementById("streetName").style.borderColor = "red";
			  document.getElementById("streetName").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a valid street name";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkStreetName()

		/*
		 Checks the suburb for invalid input
		 */
	  function checkSuburb() {
		  var suburb = document.getElementById('suburb').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(suburb)) || suburb == ''){
			  document.getElementById("suburb").style.borderColor = "red";
			  document.getElementById("suburb").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a valid suburb";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkSuburb()

		/*
		 Checks the postcode for invalid input
		 */
	  function checkPostcode() {
		  var postCode = document.getElementById('postCode').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(postCode)) || postCode == '' || postCode.length > 4 || postCode.length < 4){
			  document.getElementById("postCode").style.borderColor = "red";
			  document.getElementById("postCode").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a valid postcode";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPostcode()

  }

})();
(function() {

  angular
    .module('packageDelivery')
    .service('meanData', meanData);

  meanData.$inject = ['$http', 'functionService'];
  /*
  A route so that the profile with auth can be gotten from another part of the application
   */
  function meanData ($http, functionService) {


    // the http request for the profile using the route /api/profile
    var getProfile = function () {
      return $http.get('/api/profile', {
        headers: {
          Authorization: 'Bearer '+ functionService.getToken()
        }
      });
    };

    return {
      getProfile : getProfile
    };
  }

})();
(function () {

  angular
    .module('packageDelivery')
    .service('functionService', functionService);

  functionService.$inject = ['$http', '$window', 'toastr', '$location'];
  function functionService ($http, $window, toastr, $location) {

    var orders;
    var order;
    var drivers;

    //save token to hold session data in browser
    var saveToken = function (token) {
      $window.localStorage['mean-token'] = token;
      console.log(token);
    };

    //retrieve token data
    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    //check if someone is currently logged in
    var isLoggedIn = function() {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        // console.log('logged in!');
        return payload.exp > Date.now() / 1000;
      } else {
        console.log('not logged in');
        return false;
      }
    };

    // A getter for the current user
    var currentUser = function() {
      if (isLoggedIn()) {
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          email: payload.email,
          name: payload.firstName,
					lastName: payload.lastName,
					streetNumber: payload.streetNumber,
					streetName : payload.streetName,
					suburb: payload.suburb,
					postCode: payload.postCode
        };
      }
    };

    //retrieve logged in user type
    var loggedInUserType = function(){
      if (isLoggedIn()) {
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        //split logged in email address
        userEmail = payload.email.split('@');
        //if customer is logged in
        if (userEmail[1] != 'onthespot.com'){
          return 'customer';
        }
        //if admin is logged in
        else if (userEmail[0] == 'admin'){
            return 'admin';
        }
        //if driver is logged in
        else{
          return 'driver';
        }
      }
    };

    //send form data to server for registration
    register = function(user) {
      console.log('register being called');
      return $http.post('/api/register', user).success(function(data){
        toastr.success('Account created', 'Success');
        saveToken(data.token);
      });
    };

    //send login form data to check against database
    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
        toastr.success('Login successful', 'Success');
      });
    };

    //allow customer to update their details
		updateUser = function(user) {
			return $http.put('/api/update/details', user).success(function(data){
        toastr.success('Updated profile', 'Success');
				// Forces toastr to show success more than once
				toastr.hidden('Hidden', 'Hidden');
				console.log(data);
				saveToken(data.token);
			});
		};

    //delete browser session
    logout = function() {
      $window.localStorage.removeItem('mean-token');
      $location.path('/login');
    };

    //send order creation form data off to server
    placeOrder = function(order){
      console.log('calling placeOrder');
      return $http.post('/api/orders/new', order).success(function(data){
        toastr.success('Order placed', 'Success');
        toastr.hidden('Hidden', 'Hidden');
        console.log(data);
      });
    };

    //retrieve orders for currently logged in user
    getUserOrders = function(user){
      return $http.get('/api/orders', {params: {user : user}}).success(function(data){
        orders = data;
      });
    };

    //helper function to send order back to client
    loadOrders = function(){
      return orders;
    };

    //retrieve data for individual order
    getSingleOrder = function(orderID){
      return $http.get('/api/singleOrder', {params: {orderID: orderID}}).success(function(data){
        order = data;
      });
    };

    //helper function for retrieving individual order
    loadSingleOrder = function(){
      return order;
    };

    //mark job as 'seen by driver' when a driver opens it for the first time
    markJobAsSeen = function(order){
      return $http.put('/api/update/jobSeen', order).success(function(data){
        console.log(order + ' marked as seen!');
      });
    };

    //helper function for getting orders into admin panel
    getCurrentOrders = function() {
      return $http.get('/api/orders/current').success(function(data) {
        orders = data;
      });
    };

    //helper function for getting orders into admin panel
    getDeliveredOrders = function() {
      return $http.get('/api/orders/delivered').success(function(data) {
        orders = data;
      });
    };

    //helper function for getting orders into admin panel
    getPlacedOrders = function() {
      return $http.get('/api/orders/awaiting').success(function(data) {
        orders = data;
      });
    };

    //function to change job state in database
    updateJobState = function(update){
      return $http.put('/api/update/jobstate', update).success(function(data){
        toastr.success('Job State Changed', 'Success');
      });
    };

    //helper function for loading orders 
    loadDrivers = function() {
      return drivers;
    };

    //helper function for getting drivers into admin panel
    getAllDrivers = function() {
      return $http.get('/api/drivers/all').success(function(data) {
				drivers = data;
      });
    };

    //assign driver to unassigned job
    assignDriver = function(driver) {
      return $http.put('/api/orders/assign/driver', driver).success(function(driver) {
        var driverName = driver.driver.charAt(0).toUpperCase() + driver.driver.slice(1);
        toastr.success('Assigned to ' + driverName);
      });
    };

    //get the amount of jobs currently assigned to driver 
    getJobCountForDriver = function(driver) {
      return $http.get('/api/orders/driver', { params: { driverName: driver } }).success(function(driver) {
        orders = driver;
      });
    };

    //export functions and variables to allow them to be used in our controllers
    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      updateUser: updateUser,
      logout : logout,
      placeOrder: placeOrder,
      getUserOrders: getUserOrders,
      orders: orders,
      loadOrders: loadOrders,
      getSingleOrder: getSingleOrder,
      loadSingleOrder: loadSingleOrder,
      getCurrentOrders: getCurrentOrders,
      getDeliveredOrders: getDeliveredOrders,
      getPlacedOrders: getPlacedOrders,
      order: order,
      loggedInUserType: loggedInUserType,
      updateJobState: updateJobState,
      drivers: drivers,
      loadDrivers: loadDrivers,
      getAllDrivers: getAllDrivers,
      assignDriver: assignDriver,
      getJobCountForDriver: getJobCountForDriver,
      markJobAsSeen: markJobAsSeen
    };
  }


})();
/*
 Controller for the user
 */
(function () {

	angular
		.module('packageDelivery')
		.controller('updateUserCtrl', updateUserCtrl);

	updateUserCtrl.$inject = ['$location', 'functionService', 'toastr'];
	/*
	 Updates the user with new crendtials or keeps the old ones
	 */
	function updateUserCtrl($location, functionService, toastr) {

		var vm = this;
		vm.isLoggedIn = functionService.isLoggedIn();
		vm.currentUser = functionService.currentUser();

		console.log(vm.currentUser.lastName);
		console.log(vm.currentUser);
		// Update user object
		vm.newCredentials = {
			firstName : vm.currentUser.name,
			lastName : vm.currentUser.lastName,
			email : vm.currentUser.email,
			streetNumber: vm.currentUser.streetNumber,
			streetName: vm.currentUser.streetName,
			suburb: vm.currentUser.suburb,
			postCode: vm.currentUser.postCode
		};

		// Old object used to pre-fill
		vm.credentials = {
			firstName : vm.currentUser.name,
			lastName : vm.currentUser.lastName,
			email : vm.currentUser.email,
			streetNumber: vm.currentUser.streetNumber,
			streetName: vm.currentUser.streetName,
			suburb: vm.currentUser.suburb,
			postCode: vm.currentUser.postCode
		};

		/*
		 When the user submits the, do all validation and transport data given to the back end
		 */
		vm.onSubmit = function () {
			console.log('Submitting update user details');
			console.log(vm.credentials);
			functionService
				.register(vm.credentials)
				.error(function(err){
					alert(err);
				})
				.then(function(){
					$location.path('profile');
				});
		};
		/*
		 	Takes the user to the update user details page
		 */

		vm.updateUser = function(){
			functionService.updateUser(vm.newCredentials);
			$location.path('/profile');
		}
	}

})();
(function () {

  angular
    .module('packageDelivery')
    .controller('navigationCtrl', navigationCtrl);

  navigationCtrl.$inject = ['$location','functionService', 'toastr'];
  function navigationCtrl($location, functionService, toastr) {
    var navvm = this;
    var path = $location.path();

	  navvm.userType = '';

    if(path == "/orders"){
      document.getElementById('myOrders').className = "active";
      document.getElementById('newOrder').className = "";
      document.getElementById('myProfile').className = "";
    } else if(path == "/orders/new"){
      document.getElementById('myOrders').className = "";
      document.getElementById('newOrder').className = "active";
      document.getElementById('myProfile').className = "";
    } else if(path == "/profile"){
      document.getElementById('myOrders').className = "";
      document.getElementById('newOrder').className = "";
      document.getElementById('myProfile').className = "active";
    } else if (path === "/admin/dashboard") {
	    document.getElementById('myOrders').className = "";
	    document.getElementById('newOrder').className = "";
	    document.getElementById('myProfile').className = "";
	    document.getElementById('dashboard').className = "active";
    }

    navvm.isLoggedIn = functionService.isLoggedIn();
    navvm.currentUser = functionService.currentUser();

    // Show/Hide tabs based on logged in user type
	  var type = functionService.loggedInUserType();
	  switch(type) {
		  case 'driver':
		  	navvm.userType = 'driver';
			  break;
		  case 'admin':
		  	navvm.userType = 'admin';
			  break;
		  case 'customer':
		  	navvm.userType = 'customer';
			  break;
	  }

    navvm.logout = function(){
			functionService.logout();
			toastr.warning('You have logged out', 'Warning');
    };
  }

})();
(function () {

  angular
    .module('packageDelivery')
    .directive('navigation', navigation);

  function navigation () {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/navigation/navigation.template.html',
      controller: 'navigationCtrl as navvm'
    };
  }

})();