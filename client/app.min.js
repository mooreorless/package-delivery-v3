(function () {

  angular.module('packageDelivery', ['ngRoute', 'toastr', 'ngMap']);

  function config ($routeProvider, $locationProvider) {
    $routeProvider
      .when('/register', {
        templateUrl: '/auth/register/register.view.html',
        controller: 'registerCtrl',
        controllerAs: 'vm'
      })
      .when('/login', {
        templateUrl: '/auth/login/login.view.html',
        controller: 'loginCtrl',
        controllerAs: 'vm'
      })
      .when('/profile', {
        templateUrl: '/profile/profile.view.html',
        controller: 'profileCtrl',
        controllerAs: 'vm'
      })
      .when('/orders', {
        templateUrl: '/orders/orders.view.html',
        controller: 'OrderCtrl',
        controllerAs: 'vm'
      })
      .when('/orders/new', {
        templateUrl: '/orders/newOrder.view.html',
        controller: 'newOrderCtrl',
        controllerAs: 'vm'
      })
      .when('/order/:orderID', {
        templateUrl: '/orders/singleOrder.view.html',
        controller: 'singleOrderCtrl',
        controllerAs: 'vm'
      })
			.when('/update/details', {
				templateUrl: 'auth/update/details/user.view.html',
				controller: 'updateUserCtrl',
				controllerAs: 'vm'
			})
			.when('/admin/dashboard', {
				templateUrl: '/admin/dashboard/dashboard.view.html',
				controller: 'DashBoardCtrl',
				controllerAs: 'vm'
			})
			.when('/admin/dashboard/item', {
				templateUrl: '/admin/dashboard/individual-item/individual-item.view.html',
				controller: 'ItemDashBoardCtrl',
				controllerAs: 'vm'
			})
      .otherwise({redirectTo: '/login'});

    // use the HTML5 History API
    $locationProvider.html5Mode(true);

  }

  function run($rootScope, $location, $window, functionService) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {

    	if (!functionService.isLoggedIn()) {
				switch ($location.path()) {
					case '/profile':
						console.log('login to view profile');
						// $location.path('/'); added redirect in individual route instead
						break;

					case '/orders':
						console.log('login to view orders');
						console.log('if user is logged in message with watermark here');
						// $location.path('/');
						break;

					case '/orders/new':
						console.log('login to make an order');
						// $location.path('/');
						break;
				}
			}
    });
    // $rootScope.$on('$routeChangeSuccess', function(event, nextRoute, currentRoute){
    //   if(currentRoute){
    //     currURL = (nextRoute.$$route.originalPath);
    //     prevURL = (currentRoute.$$route.originalPath);
    //     if (currURL == '/login' || prevURL == '/login'){
    //       console.log('force refresh!');
    //       // $window.location.reload();
    //       // $scope.$apply();
    //     }
    //   }
    // });
  }
  
  angular
    .module('packageDelivery', ['ngRoute', 'toastr', 'ngMap'])
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$window', 'functionService', run]);

})();
(function() {
  
  angular
    .module('packageDelivery')
    .controller('homeCtrl', homeCtrl);

    homeCtrl.$inject = ['$location', '$scope', 'functionService'];
    function homeCtrl ($location, $scope, functionService) {
		console.log('Home controller is running');
		$scope.hidden = ($location.path() == '/login');
    }

    
})();
(function() {
	
	angular
		.module('packageDelivery')
		.controller('profileCtrl', profileCtrl);

	profileCtrl.$inject = ['$location', 'functionService', 'meanData', 'toastr'];
	function profileCtrl($location, functionService, meanData, toastr) {
		var vm = this;

		vm.user = {};

		meanData.getProfile()
			.success(function(data) {
				vm.user = data;
				console.log(data);
			})
			.error(function (e) {
				toastr.error('Please sign in or make an account', 'Error');
				$location.path('/');
				console.log(e);
			});

			vm.view = "Account";

			vm.setView = function(view) {
				switch (view) {
							case 'Account':
									document.getElementById('account').className = "active";
									document.getElementById('billing').className = "";
									document.getElementById('help').className = "";
									break;
							case 'Billing':
										document.getElementById('billing').className = "active";
									document.getElementById('account').className = "";
									document.getElementById('help').className = "";
									break;
							case 'Help':
									document.getElementById('help').className = "active";
									document.getElementById('account').className = "";
									document.getElementById('billing').className = "";
									break;
					}
					vm.view = view;
			};

			vm.updateDetails = function(){
			// console.log();
			functionService.updateUser(vm.user);
			toastr.success('Updated account details', 'Success');
		};


	}

})();
(function () {

  angular
	.module('packageDelivery')
	.controller('newOrderCtrl', newOrderCtrl);

  newOrderCtrl.$inject = ['$location', '$rootScope','functionService', 'toastr'];
  function newOrderCtrl($location, $rootScope, functionService, toastr) {

		var vm = this;

		vm.isLoggedIn = functionService.isLoggedIn();

		vm.currentUser = functionService.currentUser();

		vm.newOrder = {
			userID: vm.currentUser.email,
			pickUpNumber: vm.currentUser.streetNumber,
			pickUpName: vm.currentUser.streetName,
			pickUpSuburb: vm.currentUser.suburb,
			pickUpPostcode: vm.currentUser.postCode,
			dropOffNumber: '',
			dropOffName: '',
			dropOffSuburb: '',
			dropOffPostcode: '',
			notes: '',
			isFragile: '',
			isExpress: '',
			state: 'Order Placed',
			pickUpDate: ''
		};

		vm.onSubmit = function () {

			if (validateFields()) {
				console.log('Placing Order');
				console.log(vm.newOrder);
				functionService
					.placeOrder(vm.newOrder)
					.error(function(err){
						console.log(err);
						toastr.error(err, 'Error');
				})
				.then(function(){
					$location.path('orders')
				});
			}
		};

	  function validateFields() {
		  return checkPickUpStreetNumber() && checkPickUpStreetName() && checkPickUpSuburb() && checkDropOffStreetNumber() && checkDropOffStreetName() && checkDropOffSuburb() && checkDropOffPostcode();
	  }//end validateFields()


	  //PICK UP VALIDATION

	  function checkPickUpStreetNumber() {
		  var streetNumber = document.getElementById('pickUpNumber').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(streetNumber)) || streetNumber == ''){
			  document.getElementById("pickUpNumber").style.borderColor = "red";
			  document.getElementById("pickUpNumber").focus();
			  document.getElementById("order-error-msg").innerHTML = "Error: Please enter a valid pick up street number";
			  document.getElementById("order-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPickupStreetNumber()

	  function checkPickUpStreetName() {
		  var streetName = document.getElementById('pickUpName').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(streetName)) || streetName == ''){
			  document.getElementById("pickUpName").style.borderColor = "red";
			  document.getElementById("pickUpName").focus();
			  document.getElementById("order-error-msg").innerHTML = "Error: Please enter a valid pick up street name";
			  document.getElementById("order-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPickupStreetName()

	  function checkPickUpSuburb() {
		  var suburb = document.getElementById('pickUpSuburb').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(suburb)) || suburb == ''){
			  document.getElementById("pickUpSuburb").style.borderColor = "red";
			  document.getElementById("pickUpSuburb").focus();
			  document.getElementById("order-error-msg").innerHTML = "Error: Please enter a valid pick up suburb";
			  document.getElementById("order-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPickUpSuburb()

	  function checkPickupPostcode() {
		  var postCode = document.getElementById('pickUpPostcode').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(postCode)) || postCode == '' || postCode.length > 4 || postCode.length < 4){
			  document.getElementById("pickUpPostcode").style.borderColor = "red";
			  document.getElementById("pickUpPostcode").focus();
			  document.getElementById("order-error-msg").innerHTML = "Error: Please enter a valid pick up postcode";
			  document.getElementById("order-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPickupPostcode()

	  // DROP OFF VALIDATION

	  function checkDropOffStreetNumber() {
		  var streetNumber = document.getElementById('dropOffNumber').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(streetNumber)) || streetNumber == ''){
			  document.getElementById("dropOffNumber").style.borderColor = "red";
			  document.getElementById("dropOffNumber").focus();
			  document.getElementById("order-error-msg").innerHTML = "Error: Please enter a valid delivery street number";
			  document.getElementById("order-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkDropOffStreetNumber()

	  function checkDropOffStreetName() {
		  var streetName = document.getElementById('dropOffName').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(streetName)) || streetName == ''){
			  document.getElementById("dropOffName").style.borderColor = "red";
			  document.getElementById("dropOffName").focus();
			  document.getElementById("order-error-msg").innerHTML = "Error: Please enter a valid delivery street name";
			  document.getElementById("order-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkDropOffStreetName()

	  function checkDropOffSuburb() {
		  var suburb = document.getElementById('dropOffSuburb').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(suburb)) || suburb == ''){
			  document.getElementById("dropOffSuburb").style.borderColor = "red";
			  document.getElementById("dropOffSuburb").focus();
			  document.getElementById("order-error-msg").innerHTML = "Error: Please enter a valid delivery suburb";
			  document.getElementById("order-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkDropOffSuburb()

	  function checkDropOffPostcode() {
		  var postCode = document.getElementById('dropOffPostcode').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(postCode)) || postCode == '' || postCode.length > 4 || postCode.length < 4){
			  document.getElementById("dropOffPostcode").style.borderColor = "red";
			  document.getElementById("dropOffPostcode").focus();
			  document.getElementById("order-error-msg").innerHTML = "Error: Please enter a valid delivery postcode";
			  document.getElementById("order-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkDropOffPostcode()

  }

})();
(function () {

  angular
    .module('packageDelivery')
    .controller('OrderCtrl', OrderCtrl);

  OrderCtrl.$inject = ['$location', '$rootScope', 'functionService', 'toastr'];
  function OrderCtrl($location, $rootScope, functionService, toastr) {

    var vm = this;

    vm.isLoggedIn = functionService.isLoggedIn();
    vm.currentUser = functionService.currentUser();
    
		vm.ordersMessage = '';

		functionService
			.getUserOrders(vm.currentUser.email)
			.error(function(err){
				toastr.warning(err, 'Error');
			})
			.then(function(){
				$location.path('orders');
				//if no orders found, have watermark/empty state view etc
				vm.orders = functionService.loadOrders();
		});

		var userEmail = vm.currentUser.email.split('@');

		if ((userEmail[1] == 'onthespot.com') && (userEmail[0] != 'admin')){
			vm.ordersMessage = 'Displaying all orders assigned to you ' + vm.currentUser.name;
		}
		else {
			vm.ordersMessage = 'Displaying all orders placed by you ' + vm.currentUser.name;
		}

    vm.openOrder = function(order){
      console.log(order);
      $location.path('order/' + order._id);
    };
  }

})();
(function () {

  angular
    .module('packageDelivery')
    .controller('singleOrderCtrl', singleOrderCtrl);

  singleOrderCtrl.$inject = ['$location', '$rootScope', '$routeParams', 'functionService', 'NgMap'];
  function singleOrderCtrl($location, $rootScope, $routeParams, functionService, NgMap) {

    var vm = this;

    //get order ID from route parameters 
    vm.orderID = $routeParams.orderID;

    vm.googleMapsUrl = '<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC0ZemKOuENUDXYGs4GVAVIbkPs3vyqJXA"></script>';

    functionService
    .getSingleOrder(vm.orderID)
    .error(function(err){
      if (err){
      alert(err);
      }
    })
    .then(function(){
      vm.order = functionService.loadSingleOrder();
    }).then(function(){
      vm.pickUpAddress = vm.order.pickUpNumber+' '+vm.order.pickUpName+' '+vm.order.pickUpSuburb+' '+vm.order.pickUpPostcode;
      vm.dropOffAddress = vm.order.dropOffNumber+' '+vm.order.dropOffName+' '+vm.order.dropOffSuburb+' '+vm.order.dropOffPostcode;
      console.log(vm.pickUpAddress);
    });

    NgMap.getMap().then(function(map) {
      console.log(map.getCenter());
      console.log('markers', map.markers);
      console.log('shapes', map.shapes);
  });

  }

})();
(function() {

	angular
		.module('packageDelivery')
		.controller('DashBoardCtrl', DashBoardCtrl);

	DashBoardCtrl.$inject = ['$location', 'functionService', 'toastr'];
	function DashBoardCtrl($location, functionService, toastr) {

		var vm = this;

		var date = new Date();
		vm.currentDate = date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear();

		functionService.getCurrentOrders()
			.then(function() {
				vm.orders = functionService.loadOrders();
				vm.currentOrderCount = vm.orders.length;
			})
			.then(function() {
				vm.deliveredOrderCount = vm.orders.length - Math.floor((Math.random() * 20) + 1);
			})
			.then(function() {
				vm.awaitingOrderCount = vm.orders.length;
			})
	}


})();
(function () {

  angular
  .module('packageDelivery')
  .controller('loginCtrl', loginCtrl);

  loginCtrl.$inject = ['$location', 'functionService', 'toastr'];
  function loginCtrl($location, functionService, toastr) {
    var vm = this;

    vm.credentials = {
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      functionService
        .login(vm.credentials)
        .error(function(err){
        	document.getElementById('login-error-msg').style.display = 'block';
					console.log(err);
        })
        .then(function(){
          $location.path('/profile');
        });
    };
  }

})();
(function () {

  angular
    .module('packageDelivery')
    .controller('registerCtrl', registerCtrl);

  registerCtrl.$inject = ['$location', 'functionService', 'toastr'];
  function registerCtrl($location, functionService, toastr) {
    var vm = this;

    vm.credentials = {
      firstName : "",
      lastName : "",
      email : "",
      password: "",
      streetNumber: "",
      streetName: "",
      suburb: "",
      postCode: ""
    };

    vm.onSubmit = function () {
      console.log('Submitting registration');
			if (validateFields()) {
				functionService
					.register(vm.credentials)
					.error(function(err){
						toastr.error('Something went wrong, please try again', 'Error');
						console.log(err);
					})
					.then(function(){
						$location.path('profile');
				});
			}
    };

    function validateFields() {
	    return checkFirstName() && checkLastName() && checkEmail() && checkPassword() && checkStreetName() && checkStreetNumber() && checkSuburb() && checkPostcode();
    }

	  function checkFirstName() {
		  var name = document.getElementById('firstName').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if(name === ''){
			  document.getElementById("firstName").style.borderColor = "red";
			  document.getElementById("firstName").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a first name";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  if(regExprContainsNumbers.test(name)){
				  document.getElementById("firstName").style.borderColor = "red";
				  document.getElementById("firstName").focus();
				  document.getElementById("register-error-msg").innerHTML = "Please enter a valid first name";
				  document.getElementById("register-error-msg").style.display = "block";
				  return false;
			  } else {
				  document.getElementById("firstName").style.borderColor = "transparent";
				  return true;
			  }//end if
		  }//end if
	  }//end checkFirstName()

	  function checkLastName() {
		  var name = document.getElementById('lastName').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if(name === ''){
			  document.getElementById("lastName").style.borderColor = "red";
			  document.getElementById("lastName").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a last name";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  if(regExprContainsNumbers.test(name)){
				  document.getElementById("lastName").style.borderColor = "red";
				  document.getElementById("lastName").focus();
				  document.getElementById("register-error-msg").innerHTML = "Please enter a valid last name";
				  document.getElementById("register-error-msg").style.display = "block";
				  return false;
			  } else {
				  document.getElementById("lastName").style.borderColor = "transparent";
				  return true;
			  }//end if
		  }//end if
	  }//end checkLastName()

	  function checkEmail() {
		  var email = document.getElementById('email').value;
		  var re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

		  if(email === ''){
			  document.getElementById("email").style.borderColor = "red";
			  document.getElementById("email").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter an email";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  if(re.test(email)){
				  document.getElementById("email").style.borderColor = "transparent";
				  return true;
			  } else {
				  document.getElementById("email").style.borderColor = "red";
				  document.getElementById("email").focus();
				  document.getElementById("register-error-msg").innerHTML = "Please enter a valid email";
				  document.getElementById("register-error-msg").style.display = "block";
				  return false;
			  }//end if
		  }//end if
	  }//end checkEmail()

	  function checkPassword() {
		  var password = document.getElementById('password').value;
		  if(password.length < 5) {
			  document.getElementById("password").style.borderColor = "red";
			  document.getElementById("password").focus();
			  document.getElementById("register-error-msg").innerHTML = "Password cannot be less than 5 characters";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else if(password.length > 20) {
			  document.getElementById("password").style.borderColor = "red";
			  document.getElementById("password").focus();
			  document.getElementById("register-error-msg").innerHTML = "Password cannot be more than 20 characters";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  document.getElementById("password").style.borderColor = "transparent";
			  return true;
		  }//end if
	  }//end checkPassword()

	  function checkStreetNumber() {
		  var streetNumber = document.getElementById('streetNumber').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(streetNumber)) || streetNumber == ''){
			  document.getElementById("streetNumber").style.borderColor = "red";
			  document.getElementById("streetNumber").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a valid street number";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkStreetNumber()

	  function checkStreetName() {
		  var streetName = document.getElementById('streetName').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(streetName)) || streetName == ''){
			  document.getElementById("streetName").style.borderColor = "red";
			  document.getElementById("streetName").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a valid street name";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkStreetName()

	  function checkSuburb() {
		  var suburb = document.getElementById('suburb').value;
		  var regExprContainsNumbers = /[0-9]/;

		  if((regExprContainsNumbers.test(suburb)) || suburb == ''){
			  document.getElementById("suburb").style.borderColor = "red";
			  document.getElementById("suburb").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a valid suburb";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkSuburb()

	  function checkPostcode() {
		  var postCode = document.getElementById('postCode').value;
		  var regExprContainsLetters = /[a-zA-Z]/;

		  if((regExprContainsLetters.test(postCode)) || postCode == '' || postCode.length > 4 || postCode.length < 4){
			  document.getElementById("postCode").style.borderColor = "red";
			  document.getElementById("postCode").focus();
			  document.getElementById("register-error-msg").innerHTML = "Please enter a valid postcode";
			  document.getElementById("register-error-msg").style.display = "block";
			  return false;
		  } else {
			  return true;
		  }
	  }//end checkPostcode()

  }

})();
(function() {

  angular
    .module('packageDelivery')
    .service('meanData', meanData);

  meanData.$inject = ['$http', 'functionService'];
  function meanData ($http, functionService) {

    var getProfile = function () {
      return $http.get('/api/profile', {
        headers: {
          Authorization: 'Bearer '+ functionService.getToken()
        }
      });
    };

    return {
      getProfile : getProfile
    };
  }

})();
(function () {

  angular
    .module('packageDelivery')
    .service('functionService', functionService);

  functionService.$inject = ['$http', '$window', 'toastr', '$location'];
  function functionService ($http, $window, toastr, $location) {

    var orders;
    var order;

    var saveToken = function (token) {
      $window.localStorage['mean-token'] = token;
			toastr.success('Login successful', 'Success');
      console.log(token);
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function() {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        // console.log('logged in!');
        return payload.exp > Date.now() / 1000;
      } else {
        console.log('not logged in');
        return false;
      }
    };

    var currentUser = function() {
      if (isLoggedIn()) {
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          email: payload.email,
          name: payload.firstName,
					lastName: payload.lastName,
					streetNumber: payload.streetNumber,
					streetName : payload.streetName,
					suburb: payload.suburb,
					postCode: payload.postCode
        };
      }
    };

    register = function(user) {
      console.log('register being called');
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

		updateUser = function(user) {
			console.log(user);
			return $http.put('/api/update/details', user).success(function(err,data){
				if (err) {
					console.log(err);
				}
				console.log("Update user fin");
				console.log(data);
				saveToken(data.token);
			});
		};

    logout = function() {
      $window.localStorage.removeItem('mean-token');
      $location.path('/login');
    };

    placeOrder = function(order){
      console.log('calling placeOrder');
      return $http.post('/api/orders/new', order).success(function(data){
        console.log(data);
      });
    };

    getUserOrders = function(user){
      return $http.get('/api/orders', {params: {user : user}}).success(function(data){
        orders = data;
      });
    };

    loadOrders = function(){
      return orders;
    };

    getSingleOrder = function(orderID){
      return $http.get('/api/singleOrder', {params: {orderID: orderID}}).success(function(data){
        order = data;
        // console.log('from client side:' + data);
      });
    };

    loadSingleOrder = function(){
      return order;
    };

    getCurrentOrders = function() {
    	return $http.get('/api/orders/current').success(function(data) {
    		orders = data;
	    });
    };

    getDeliveredOrders = function() {
    	return $http.get('/api/orders/delivered').success(function(data) {
    	  orders = data;
	    });
    };

    getPlacedOrders = function() {
    	return $http.get('/api/order/awaiting').success(function(data) {
    	  orders = data;
	    });
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
			updateUser: updateUser,
      logout : logout,
	    placeOrder: placeOrder,
      getUserOrders: getUserOrders,
      orders: orders,
      loadOrders: loadOrders,
      getSingleOrder: getSingleOrder,
      loadSingleOrder: loadSingleOrder,
	    getCurrentOrders: getCurrentOrders,
	    getDeliveredOrders: getDeliveredOrders,
	    getPlacedOrders: getPlacedOrders,
      order: order
    };
  }


})();
(function() {

	angular
		.module('packageDelivery')
		.controller('ItemDashBoardCtrl', ItemDashBoardCtrl);

	ItemDashBoardCtrl.$inject = ['$location', 'toastr'];
	function ItemDashBoardCtrl($location, toastr) {

	}

})();
(function () {

	angular
		.module('packageDelivery')
		// TODO
		.controller('updateUserCtrl', updateUserCtrl);

	updateUserCtrl.$inject = ['$location', 'functionService', 'toastr'];
	function updateUserCtrl($location, functionService, toastr) {

		var vm = this;
		vm.isLoggedIn = functionService.isLoggedIn();
		vm.currentUser = functionService.currentUser();

		console.log(vm.currentUser.lastName);
		console.log(vm.currentUser);
		// Update user object
		vm.newCredentials = {
			firstName : vm.currentUser.name,
			lastName : vm.currentUser.lastName,
			email : vm.currentUser.email,
			streetNumber: vm.currentUser.streetNumber,
			streetName: vm.currentUser.streetName,
			suburb: vm.currentUser.suburb,
			postCode: vm.currentUser.postCode
		};

		// Old object used to pre-fill
		vm.credentials = {
			firstName : vm.currentUser.name,
			lastName : vm.currentUser.lastName,
			email : vm.currentUser.email,
			streetNumber: vm.currentUser.streetNumber,
			streetName: vm.currentUser.streetName,
			suburb: vm.currentUser.suburb,
			postCode: vm.currentUser.postCode
		};

		vm.updateUser = function(){
			// console.log();
			functionService.updateUser(vm.newCredentials);
			$location.path('profile');
			toastr.success('Updated account details', 'Success');
		}
	}

})();
(function () {

  angular
    .module('packageDelivery')
    .controller('navigationCtrl', navigationCtrl);

  navigationCtrl.$inject = ['functionService', 'toastr'];
  function navigationCtrl(functionService, toastr) {
    var navvm = this;

    navvm.isLoggedIn = functionService.isLoggedIn();

    navvm.currentUser = functionService.currentUser();

    navvm.logout = function(){
		functionService.logout();
		toastr.warning('You have logged out', 'Warning');
    };
  }

})();
(function () {

  angular
    .module('packageDelivery')
    .directive('navigation', navigation);

  function navigation () {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/navigation/navigation.template.html',
      controller: 'navigationCtrl as navvm'
    };
  }

})();